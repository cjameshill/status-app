{"version":3,"sources":["app.scss","_variables.scss","../../../node_modules/bourbon/app/assets/stylesheets/css3/_selection.scss","../../../bower_components/susy/sass/susy/language/susy/_box-sizing.scss","../../../node_modules/bourbon/app/assets/stylesheets/addons/_prefixer.scss","_base.scss","../../../bower_components/mappy-breakpoints/_mappy-breakpoints.scss","../../../node_modules/bourbon/app/assets/stylesheets/addons/_clearfix.scss","_styles.scss","_forms.scss","../../../bower_components/susy/sass/susy/output/support/_rem.scss","../../../bower_components/susy/sass/susy/language/susy/_span.scss","../../../bower_components/susy/sass/susy/output/shared/_direction.scss","../../../bower_components/susy/sass/susy/language/susy/_gutters.scss"],"names":[],"mappings":"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","file":"app.css","sourcesContent":["\n\n/* VENDOR\n========================================================================== */\n\n@import \"bourbon\";\n@import \"susy\";\n@import \"./bower_components/mappy-breakpoints/mappy-breakpoints\";\n\n/* BASE \n========================================================================== */\n\n@import '_variables.scss';\n@import '_base.scss';\n@import '_styles.scss';\n@import '_forms.scss';\n\n","/* VARIABLES\n========================================================================== */\n\n$white: #fff;\n$light: #e8e8e8;\n$grey: #6a6a6a;\n$dark: #151515;\n$orange: #ff7600;\n$yellow: #ffd800;\n$blue: #00baff;\n$purple: #3b006c;\n$brown: #1f1600;\n$black: #000;\n$red: hsl(0, 100%, 45%);\n$green: #2ca300;\n\n$primaryColor: $white;\n$secondaryColor: $dark;\n$thirdColor: $grey;\n$fourthColor: $orange;\n\n$gradientBlack: rgba(0, 0, 0, 0.8);\n$gradientGrey: rgba(0, 0, 0, 0.5);\n\n$gradientWhite: $white;\n$gradientLight: #e8e8e8;\n\n$transparentWhite: rgba(255, 255, 255, 0.9);\n\n    $primaryGradientTop: $gradientBlack;\n    $primaryGradientBottom: $gradientGrey;\n\n    $secondaryGradientTop: $gradientWhite;\n    $secondaryGradientBottom: $gradientLight;  \n\n    $thirdGradientTop: $orange;\n    $thirdGradientBottom: $orange; \n\n\n$userButtonBg: $orange;\n$userButtonHover: $dark;\n\n$alertBarErrorBg: $red;\n$alertBarSuccessBg: $primaryColor;\n\n$loginBarBg: $light;\n\n$loginButtonBg: $orange;\n$loginButtonColor: $light;\n\n$loginButtonHoverBg: $dark;\n$loginButtonHoverColor: $light;\n\n$font1: 'Passion One', helvetica, sans-serif;\n$font2: 'Lato', helvetica, sans-serif;\n$font3: helvetica, sans-serif;\n\n$navButtonColor: $primaryColor;\n$navButtonFont: $font2;\n$navButtonWeight: 700;\n$navButtonTransform: uppercase;\n$navButtonbgColor: $orange;\n$navButtonLetterSpacing: 0.1em;\n$navButtonFontSize: 16px;\n$navButtonHoverColor: $orange;\n\n$offCanvasNavHoverColor: $black;\n$offCanvasNavColor: $grey;\n$offCanvasNavSize: 1.9em;\n\n\n$moreHeight: 4rem;\n$moreBgColor: $grey;\n\n\n$sectionH: 650px;\n\n$loginBarH: 37rem;\n\n$topBarH: 10rem;\n$topBarBg: $primaryColor;\n\n$off-canvas-width: 75vw;\n$transition: all 200ms ease-in-out;\n$animationDelay: 200ms;\n\n\n$articleHeaderSize: 1.8em;\n$articleDateSize: 1.8em;\n$articleSnippetSize: 1.5em;\n$articleTagSize: $articleDateSize;\n\n\n\n@mixin linearGradient($top, $bottom){\n    background: $top;\n    background: -moz-linear-gradient(top,  $top 0%, $bottom 100%);\n    background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$top), color-stop(100%,$bottom));\n    background: -webkit-linear-gradient(top,  $top 0%,$bottom 100%); \n    background: -o-linear-gradient(top,  $top 0%,$bottom 100%);\n    background: -ms-linear-gradient(top,  $top 0%,$bottom 100%);\n    background: linear-gradient(to bottom,  $top 0%,$bottom 100%);\n    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#ffffff', endColorstr='#000000',GradientType=0 );\n}\n\n\n@mixin cover-background($img-uri) {\n    background: url($img-uri) no-repeat center center; \n    -webkit-background-size: cover;\n    -moz-background-size: cover;\n    -o-background-size: cover;\n    background-size: cover;\n}\n\n@mixin size($width, $height: $width) {\n      width: $width;\n      height: $height;\n}\n\n@mixin margin($margin, $padding) {\n      margin: $margin;\n      padding: $padding;\n}\n\n\n\n\n/* FONTS\n========================================================================== */\n\n@include selection {\n  background-color: $orange;\n}\n\n$aColor: $primaryColor;\n$aHover: $fourthColor;\n\n\n$bold: 800;\n$light: 100;\n\n$hSpacing: -0.02em;\n\n$fontMargin: 0.3em;\n$fontPadding: 0.3em;\n\np { \n    margin-bottom: $fontMargin/2;\n    padding: $fontPadding/2;\n    font-family: $font2;\n    font-weight: 400;\n    font-size: 1.8em;\n    line-height: 1.5em;\n    letter-spacing: -0.04em;\n}\n\nh1, h2, h3, h4, h5 {\n    text-align: center;\n    text-transform: uppercase;\n    line-height: 0.9em;\n    font-family: $font2;\n    font-weight: 400;\n    margin: $fontMargin;\n    padding: $fontPadding;\n    color: $primaryColor;\n}\n\nh1 {font-size: 6em; letter-spacing: $hSpacing;}\n\nh2 {font-size: 4.236em; letter-spacing: $hSpacing;}\n\nh3 {font-size: 2.618em; letter-spacing: $hSpacing;}\n\nh4 {font-size: 1.618em;}\n\nh5 {font-size: 1.3em; }\n\nsmall, .font_small {font-size: 0.7em;}\n\nstrong { font-weight: $bold; }\n\n.hr {\n    display: block;\n    height: 1px;\n    background: hsl(0, 0%, 80%);\n    width: 80%;\n    margin: 3em auto;\n}\n\na {\n    &:active {text-decoration: none; color: $aColor;}\n    &:visited {text-decoration: none; color: $aColor;}\n    &:hover {text-decoration: none; color: $aHover;}\n    &:link {text-decoration: none; color: $aColor;}\n}\n\n\n$base-font-size: 9px; \n\n\nbutton {\n    border: none;\n    margin: 0;\n    padding: 0;\n}\n\n.highlight {\n    background: $fourthColor;\n    border-radius: 50%;\n    padding: 0.3em 0.6em;\n    margin: 0 0.3em;\n}\n\n\n\n/* GRID\n========================================================================== */\n\n$susy: (\n  columns: 12,\n  gutter-position: after,\n  gutters: .25,\n  global-box-sizing: border-box,\n);\n\n$susyFull: (\n  columns: 12,\n  gutter-position: after,\n  gutters: 0,\n  global-box-sizing: border-box,\n);\n\n@include border-box-sizing;\n\n$breakpoints: (\n  'small'     : 320px,\n  'med'       : 640px,\n  'large'     : 920px,\n  'wide'      : 1200px,\n  'mega'      : 1400px,\n  );\n\n\n/* Z-INDEX\n========================================================================== */\n\n$elements: footer, section, dogTagsBar, loginBar, topBar, main, dashboardHeader, newsletterNav, off-canvas, modals, dogTagsBoard, alertBar;\n\n$sectionElements: bg, contents;\n\n","@charset \"UTF-8\";\r\n\r\n/// Outputs the spec and prefixed versions of the `::selection` pseudo-element.\r\n///\r\n/// @param {Bool} $current-selector [false]\r\n///   If set to `true`, it takes the current element into consideration.\r\n///\r\n/// @example scss - Usage\r\n///   .element {\r\n///     @include selection(true) {\r\n///       background-color: #ffbb52;\r\n///     }\r\n///   }\r\n///\r\n/// @example css - CSS Output\r\n///   .element::-moz-selection {\r\n///     background-color: #ffbb52;\r\n///   }\r\n///\r\n///   .element::selection {\r\n///     background-color: #ffbb52;\r\n///   }\r\n\r\n@mixin selection($current-selector: false) {\r\n  @if $current-selector {\r\n    &::-moz-selection {\r\n      @content;\r\n    }\r\n\r\n    &::selection {\r\n      @content;\r\n    }\r\n  } @else {\r\n    ::-moz-selection {\r\n      @content;\r\n    }\r\n\r\n    ::selection {\r\n      @content;\r\n    }\r\n  }\r\n}\r\n","// Susy Box Sizing\n// =================\n\n// Global Box Sizing\n// -----------------\n// Set a box model globally on all elements.\n// - [$box]: border-box | content-box\n// - [$inherit]: true | false\n@mixin global-box-sizing(\n  $box: susy-get(global-box-sizing),\n  $inherit: false\n) {\n  $inspect: $box;\n\n  @if $inherit {\n    @at-root {\n       html { @include output((box-sizing: $box)); }\n       *, *:before, *:after { box-sizing: inherit; }\n     }\n  } @else {\n    *, *:before, *:after { @include output((box-sizing: $box)); }\n  }\n\n  @include susy-inspect(global-box-sizing, $inspect);\n  @include update-box-model($box);\n}\n\n// Border Box Sizing\n// -----------------\n// A legacy shortcut...\n// - [$inherit]: true | false\n@mixin border-box-sizing(\n  $inherit: false\n) {\n  @include global-box-sizing(border-box, $inherit);\n}\n\n// Update Box Model\n// ----------------\n// PRIVATE: Updates global box model setting\n@mixin update-box-model(\n  $box\n) {\n  @if $box != susy-get(global-box-sizing) {\n  @include susy-set(global-box-sizing, $box);\n  }\n}\n","@charset \"UTF-8\";\n\n/// A mixin for generating vendor prefixes on non-standardized properties.\n///\n/// @param {String} $property\n///   Property to prefix\n///\n/// @param {*} $value\n///   Value to use\n///\n/// @param {List} $prefixes\n///   Prefixes to define\n///\n/// @example scss - Usage\n///   .element {\n///     @include prefixer(border-radius, 10px, webkit ms spec);\n///   }\n///\n/// @example css - CSS Output\n///   .element {\n///     -webkit-border-radius: 10px;\n///     -moz-border-radius: 10px;\n///     border-radius: 10px;\n///   }\n///\n/// @require {variable} $prefix-for-webkit\n/// @require {variable} $prefix-for-mozilla\n/// @require {variable} $prefix-for-microsoft\n/// @require {variable} $prefix-for-opera\n/// @require {variable} $prefix-for-spec\n\n@mixin prefixer($property, $value, $prefixes) {\n  @each $prefix in $prefixes {\n    @if $prefix == webkit {\n      @if $prefix-for-webkit {\n        -webkit-#{$property}: $value;\n      }\n    } @else if $prefix == moz {\n      @if $prefix-for-mozilla {\n        -moz-#{$property}: $value;\n      }\n    } @else if $prefix == ms {\n      @if $prefix-for-microsoft {\n        -ms-#{$property}: $value;\n      }\n    } @else if $prefix == o {\n      @if $prefix-for-opera {\n        -o-#{$property}: $value;\n      }\n    } @else if $prefix == spec {\n      @if $prefix-for-spec {\n        #{$property}: $value;\n      }\n    } @else  {\n      @warn \"Unrecognized prefix: #{$prefix}\";\n    }\n  }\n}\n\n@mixin disable-prefix-for-all() {\n  $prefix-for-webkit:    false !global;\n  $prefix-for-mozilla:   false !global;\n  $prefix-for-microsoft: false !global;\n  $prefix-for-opera:     false !global;\n  $prefix-for-spec:      false !global;\n}\n","/* BASE\n========================================================================== */\nhtml { font-size: $base-font-size;\n    @include mappy-bp(large) {\n          font-size: 11px;\n        }\n    \n  box-sizing: border-box;\n\n    *, *:before, *:after {\n  box-sizing: inherit\n\n    }\n}\n\n#contentWrapper, footer, header, section, .content, .bg, nav { /* Clearfix */\n    @include clearfix;\n}\n#contentWrapper, footer, header, section, .content, nav, svg, .dogTagsBar, .dogTagsBoard { /* Display Block */\n    display: block;\n}\n\n.more, .flexContainer, .flexItem, .loginBar, .topBar, .topBar div, li, .logo img, .articleImgHover, .off-canvas, .more, .dogTagsBar, .dogTagsBoard, .transition { /* Transition */\n    @include transition($transition);\n}\n\n#contentWrapper {\n    margin-bottom: 100vh;\n    \n}\n\nsection, footer, .topBar, .copyright, .content, .sectionHeader, .footerHeader, .alertBar, .loginBar, .logoutButton, .loginButton, .more, .dogTagsBar {\n    width: 100%;\n    height: auto;\n}\n\nsection, footer, .bg, .alertBar, .loginBar, .off-canvas-wrapper, .dogTagsBar {\n    overflow: hidden; /* Overflow Hidden */\n}\n\nsection { /* Position Relative */\n    position: relative;\n}\n\n.bg, .logoutButton, .loginButton, .copyright, .off-canvas, .more { /* Position Absolute */\n    position: absolute;\n}\n\n.topBar, .alertBar, .loginBar, footer, .off-canvas-wrapper, .dogTagsBar, .dogTagsBoard  { /* Position Fixed */\n    position: fixed;\n}\n\n.topBar, .off-canvas-wrapper, .dogTagsBoard { /* Position Top Left */\n    top: 0;\n    left: 0;\n}\n\nsvg, body, footer, .content, .bg, footer, ul, .topBar, .logoutButton, .loginButton, .off-canvas-wrapper, .off-canvas { /* Margin 0 Padding 0 */\n    margin: 0;\n    padding: 0;\n}\n\nsection {\n    margin: 0;\n    padding: 0 0 8rem 0;\n}\n\n\n.more, .buttons, button, .dogTagsBar {\n     cursor: pointer;\n}\n\n\n\n/* BASE ELEMENTS\n========================================================================== */\n\n.bg {\n    height: 200%;\n    width: 100%;\n    top: -50%;\n    left: 0;\n    z-index: -9;\n \n}\n\nsection {\n    z-index: index($elements, section);\n    background: $light;\n    \n}\n\nsection.has_bg, .articleImgHold.has_bg, .row.has_bg {\n    position: relative;\n    \n    .sectionHeader h1, .sectionHeader h2, .sectionHeader h3 {\n        color: $primaryColor;\n    }\n    \n    &::after{\n        display: block;\n        position: absolute;\n        width: 100%;\n        height: 100%;\n        top: 0;\n        background: $gradientGrey;\n        z-index: -5;\n       \n    \n    }\n    \n   \n}\n\nsection.no_bg, .row.no_bg {\n    .sectionHeader h1, .sectionHeader h2, .sectionHeader h3 {\n        color: $thirdColor;\n    }\n}\n\nsection.first {\n    .content {\n        margin-top: 13rem;\n    }\n}\n\nfooter {\n    z-index: index($elements, footer);\n    .content {\n        z-index: index($sectionElements, contents);\n    } \n\n}\n\n\nheader {\n    text-align: center;\n    text-transform: uppercase;\n    @include margin(0, 0);\n}\n\n.logo {\n    width: auto;\n}\n\nimg { \n    @include margin(0, 0);\n    height: 100%;\n    width: auto;\n}\n\n.copyright {\n    bottom: 0;\n    line-height: 2em;\n    font-family: $font1;\n    font-size: 1.5em;\n    color: $thirdColor;\n    text-align: center;\n    text-transform: uppercase;\n}\n\n","// Mappy breakpoints\n// -----------------\n// Output media query with focus on min-width, max-width, min-height and max-height. \n// Other media rules are passed as the second argument in a map\n// \n// @author Zell Liew      \n// =================\n$breakpoints: () !default;\n$mappy-queries: () !default;\n\n// Mappy BP [Mixin]\n// ----------------\n// - $queries         : <string> or <number> in the format: \n//                      <min-width> <max-width> h <min-height> <max-height> <key> <value>\n// - $type            : <media-type> \n// - $query-fallback  : <string> selector class\n// - $breakpoints     : <map>\n@mixin mappy-bp($queries, $type: all, $query-fallback: null, $breakpoints: $breakpoints) {\n\n  // Gets mappy map through mappy-bp fn\n  $mappy-map: mappy-bp($queries, $type, $query-fallback, $breakpoints);\n\n  // Outputs media string\n  @media #{map-get($mappy-map, type)} and #{map-get($mappy-map, media-string)} {\n    @content;\n  }\n\n  // If a query fallback is provided\n  @if $query-fallback {\n    #{$query-fallback} & {\n      @content;\n    }\n  }\n}\n\n// Mappy Query [Mixin]\n// -------------------\n// Output query from $mappy-queries map. \n// $query : <string> from $mappy-queries key\n@mixin mappy-query($query, $mappy-queries: $mappy-queries) {\n  @if not map-has-key($mappy-queries, $query) {\n    @error \"#{$mappy-queries} does not contain #{$query}\";\n  }\n\n  $mappy-map: map-get($mappy-queries, $query);\n  \n  @media #{map-get($mappy-map, type)} and #{map-get($mappy-map, media-string)} {\n    @content;\n  }\n\n  // If a query fallback is provided\n  @if map-get($mappy-map, query-fallback) {\n    #{map-get($mappy-map, query-fallback)} & {\n      @content;\n    }\n  }\n}\n\n// Mappy BP [Function]\n// -------------------\n// Returns a map with 3 keys\n// - type           : Media type\n// - media-string   : media query string\n// - query-fallback : query fallback (if any)\n@function mappy-bp($queries, $type: all, $query-fallback: null, $breakpoints: $breakpoints) {\n  $media-string: ();\n  $_return: ();\n  $media-map: parse-bp($queries, $breakpoints);\n\n  @each $key, $value in $media-map {\n    @if $value and $value != 0 {\n      @if $media-string == (()) {\n        $media-string: append($media-string, unquote(\"(#{$key}: #{$value})\"));\n      }\n\n      @else {\n        $media-string: append($media-string, unquote(\"and (#{$key}: #{$value})\"));\n      }\n    }\n  }\n  $_return: (\n    type: $type, \n    media-string: inspect($media-string), \n    query-fallback: $query-fallback\n  );\n\n  @return $_return;\n}\n\n// BP [Mixin]\n// ----------\n// Convenience mixin for Mappy Breakpoints\n@mixin bp($queries, $type: all, $query-fallback: null, $breakpoints: $breakpoints) {\n  @include mappy-bp($queries, $type, $query-fallback, $breakpoints) {\n    @content;\n  }\n}\n\n// Parse BP [function]\n// -------------------\n// Parses arguments and returns a map with 4 keys\n@function parse-bp($queries, $breakpoints) {\n  $_return: ();\n  $_i: 1;\n  $_minw: null;\n  $_maxw: null;\n  $_minh: null;\n  $_maxh: null;\n  $_length: length($queries);\n\n  // Checks for width queries\n  $_minw: nth($queries, 1);\n  $_minw: mappy-validate($_minw, $breakpoints);\n\n  // Check for width queries\n  @if $_minw {\n    $_minw: mappy-convert-to-em($_minw);\n    $_return: map-merge($_return, (min-width: $_minw));\n    $queries: set-nth($queries, 1, null);\n  }\n\n  // Checks if there is a max width query\n  @if $_minw and $_length >= 2 {\n    $_maxw: nth($queries, 2);\n    $_maxw: mappy-validate($_maxw, $breakpoints);\n  }\n\n  @if $_maxw {\n    $_maxw: mappy-convert-to-em($_maxw - 1px);\n    $_return: map-merge($_return, (max-width: $_maxw));\n    $queries: set-nth($queries, 2, null);\n  }\n  \n  // Checks for height queries\n  $_h: index($queries, h) or index($queries, height);\n\n  @if $_h {\n    $_minh: nth($queries, $_h + 1);\n    $_minh: mappy-validate($_minh, $breakpoints);\n\n    @if $_minh {\n      $_minh: mappy-convert-to-em($_minh);\n      $_return: map-merge($_return, (min-height: $_minh));\n      $queries: set-nth($queries, $_h + 1, null);\n    }\n\n    // Checks if there is a max height query\n    @if $_length - $_h >= 2 {\n      $_maxh: nth($queries, $_h + 2);\n      $_maxh: mappy-validate($_maxh, $breakpoints);\n    }\n\n    @if $_maxh {\n      $_maxh: mappy-convert-to-em($_maxh - 1px);\n      $_return: map-merge($_return, (max-height: $_maxh));\n      $queries: set-nth($queries, $_h + 2, null);\n    }\n    // Reset h marker\n    $queries: set-nth($queries, $_h, null);\n  }\n\n  // Checks for other queries\n  @while $_i <= length($queries) {\n    $_key: nth($queries, $_i);\n\n    @if $_key and $_length - $_i >= 1 {\n      $_val: nth($queries, $_i + 1);\n      $_return: map-merge($_return, (#{$_key}: $_val));\n      $queries: set-nth($queries, $_i, null);\n      $queries: set-nth($queries, $_i + 1, null);\n    }\n\n    @else if $_key {\n      @warn \"Mappy Breakpoints is missing value for media feature \"#{$_key}\"\";\n    }\n    $_i: $_i + 1;\n  }\n  @return $_return;\n}\n\n// Mappy Validate [Function]\n// -------------------------\n// Checks if $query given is one of the following: \n// 1) Is a $key in the $breakpoints map\n// 2) Is a number\n// 3) Is a \"max\", \"max-width\" or \"max-height\" string\n@function mappy-validate($query, $breakpoints) {\n  $_return: null;\n\n  @if map-has-key($breakpoints, $query) {\n    $_return: map-get($breakpoints, $query);\n  }\n\n  @else if type-of($query) == number {\n    $_return: $query;\n  }\n\n  @else if $query == \"max\" or $query == \"max-height\" or $query == \"max-width\" {\n    $_return: 0;\n  }\n\n  @else {\n    $_return: null;\n  }\n  @return $_return;\n}\n\n// Mappy Convert To Em [Function]\n// -------------------------------\n// Checks and converts px values to em. Leave other units untouched.\n\n@function mappy-convert-to-em($val) {\n  @if unit($val) == \"px\" or $val == 0 {\n    @return mappy-em($val);\n  }\n\n  @else {\n    @error \"Breakpoint value must have a unit if it's a number\";\n  }\n}\n\n// Mappy Em [Function]\n// --------------------\n// Converts pixels to em with $base-font-size\n// - https://gist.github.com/ijy/1441967\n@function mappy-em($target, $context: 16px) {\n  @if $target == 0 {\n    @return 0;\n  }\n  @return $target / $context * 1em;\n}","@charset \"UTF-8\";\n\n/// Provides an easy way to include a clearfix for containing floats.\n///\n/// @link http://cssmojo.com/latest_new_clearfix_so_far/\n///\n/// @example scss - Usage\n///   .element {\n///     @include clearfix;\n///   }\n///\n/// @example css - CSS Output\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: table;\n///   }\n\n@mixin clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: table;\n  }\n}\n","/* STYLES\n========================================================================== */\n\n\n.tasksBox {\n    display: flex;\n    width: 80%;\n    margin: 3em auto;\n    min-height: 100vh;\n    flex-flow: column nowrap;\n    justify-content: center;\n    align-items: center;\n    \n    \n    form.addTask {\n        display: flex;\n        width: 100%;\n        flex-flow: row nowrap;\n        justify-content: center;\n        align-items: center;\n    }\n\n    input.inputTask {\n        border: 1px solid grey;\n        border-radius: 10px;\n        font-family: Lato, sans-serif;\n        font-size: 2.7em;\n        padding: 0.3em;\n        margin: 0.3em auto;\n        \n    }\n    \n    button.addTaskButton {\n        border-radius: 50%;\n        font-family: Lato, sans-serif;\n        font-size: 4em;\n        padding: 0.2em 0.5em;\n        margin: 0.3em;\n        \n        &:hover {\n            background: orange;\n        }\n    }\n    \n    \n    h1, h2 {\n        color: darkgray;\n        font-family: Lato, sans-serif;\n    }\n    \n    h1 {\n        font-size: 5em;\n    }\n    \n    h2 {\n        font-size: 4em;\n    }\n\n    ul {\n        width: 100%;\n    }\n\n    li {\n        display: flex;\n        flex-flow: row nowrap;\n        justify-content: space-around;\n        align-items: center;\n        flex: 1 0 100%;\n        width: 100%;\n        margin: 0.5em 0;\n        padding: 0 0.5em;\n        background: rgb(149, 255, 149);\n        cursor: pointer;\n\n    }\n    \n    .taskTitle {\n        display: flex;\n        flex: 1 0 auto;\n        width: 85%;\n        font-family: Lato, sans-serif;\n        font-size: 2.7em;\n        padding: 1em;\n        margin: 0.3em auto;\n    }\n    \n    .clearCompleted {\n        display: flex;\n        margin-top: 1em;\n        justify-content: center;\n        flex-flow: row nowrap;\n        background: grey;\n        cursor: pointer;\n        \n        &:hover {\n            background: lightgrey;\n        }\n        \n        .taskTitle {\n            text-align: right;\n            color: white;\n            font-size: 1.5em;\n        }\n    }\n    \n    \n    .close {\n        display: flex;\n        flex: 0 1 auto;\n        justify-content: center;\n        align-items: center;\n        font-family: Lato, sans-serif;\n        font-size: 4em;\n        background: none;\n        border-radius: 50%;\n        padding: 0.3em 0.7em;\n        \n        &:hover {\n            background: white;\n        }\n    }\n    \n    \n    \n\n    li:hover {\n        background: orange;\n    }\n\n    .completed {\n        p {\n            text-decoration: line-through;\n        }\n    \n        background: lightgrey;\n    }\n    \n    .isCompleted {\n        position: relative;\n        top: -0.3em;\n        left: -0.3em;\n        font-size: 0.5em;\n        color: white;\n        \n    }\n    \n}\n            ","/////////////////////   FORMS  /////////////////\n\n\n.formWrapper {\n    display: block;\n    height: auto;\n}\n\nform {\n    margin: 0;\n    padding: 0;\n    text-align: center;\n    \n}\n\n.formGroup {\n    .formRow {\n        .formItem {\n            @include span(12);\n            &:last-of-type{ @include span(12 last); }\n            \n            @include mappy-bp(med){\n                @include span(6);\n                &:last-of-type{ @include span(6 last); }\n            }\n            \n        }\n        \n    }\n}\n\n\ninput[type=\"submit\"],\ninput[type=\"reset\"],\ninput[type=\"button\"]\n{\n    background: $fourthColor;\n    line-height: normal;\n    border: none;\n    cursor: pointer;\n    overflow: visible;\n    -webkit-appearance: button; /* for input */\n    -webkit-user-select: none; /* for button */\n       -moz-user-select: none;\n        -ms-user-select: none;\n}\ninput::-moz-focus-inner,\nbutton::-moz-focus-inner {\n    border: 0;\n    padding: 0;\n}\n\n\n\n\n.formGroupButton {\n        background: $loginButtonBg;\n        color: $loginButtonColor;\n        text-align: center;\n        font-family: $font1;\n        font-size: 2.5em;\n        line-height: 2em;\n        text-transform: uppercase;\n        padding: 0.5em 1em;\n        margin: 0.5em 0;\n        cursor: pointer;\n        border: none;\n    \n        &:hover {\n            background: $loginButtonHoverBg;\n            color: $loginButtonHoverColor;\n        }\n}\n\n.submitButton {\n        border-radius: 8px;\n}\n\nlabel, .forgotPassword {\n    font-family: $font2;\n    text-align: center;\n    font-size: 1.5em;\n    color: $primaryColor;\n    text-transform: uppercase;\n    line-height: 1.5em;\n}\n\ninput[type=\"text\"],\ninput[type=\"email\"],\ninput[type=\"password\"]{\n    text-align: center;\n    font-family: $font2;\n    width: 75%;\n    background: white;\n    padding: 0.5em;\n    margin: 0 0 0.4em 0;\n    border: none;\n    font-size: 2em;\n    border-radius: 8px;\n}\n\n.formGroup {\n    .formItem {\n        input.inputError {\n            background: red;\n        }\n    }\n}\n\n","// rem Support\n// ===========\n\n// rem\n// ---\n// Check for an existing support mixin, or output directly.\n// - $prop  : <css property>\n// - $val   : <css value>\n@mixin susy-rem(\n  $prop,\n  $val\n) {\n  $_reqs: (\n    variable: rhythm-unit rem-with-px-fallback,\n    mixin: rem,\n  );\n  @if susy-support(rem, $_reqs, $warn: false) and $rhythm-unit == rem {\n    @include rem($prop, $val);\n  } @else {\n    #{$prop}: $val;\n  }\n}\n","// Span Syntax\n// ===========\n\n// Span [mixin]\n// ------------\n// Set a spanning element using shorthand syntax.\n// - $span  : <span>\n@mixin span(\n  $span\n) {\n  $inspect: $span;\n  $span: parse-span($span);\n  $output: span-math($span);\n  $nesting: susy-get(span, $span);\n  $clear: susy-get(clear, $span);\n\n  $box: susy-get(box-sizing, $span);\n  $content-box: if(susy-get(global-box-sizing) != 'border-box', true, false);\n  $box: $box or if(is-inside($span) and $content-box, border-box, null);\n\n  @if $clear == break {\n    @include break;\n  } @else if $clear == nobreak {\n    @include nobreak;\n  }\n\n  @include susy-inspect(span, $inspect);\n  @include output((box-sizing: $box));\n  @include float-span-output($output...);\n\n  @if valid-columns($nesting, silent) {\n    @include nested($span) { @content; }\n  } @else {\n    @content;\n  }\n}\n\n// Span [function]\n// ---------------\n// Return the width of a span.\n// - $span  : <span>\n@function span(\n  $span\n) {\n  @return get-span-width($span);\n}\n\n// Span Math\n// ---------\n// Get all the span results.\n// - $span: <map>\n@function span-math(\n  $span\n) {\n  $nest             : if(susy-get(role, $span) == nest, true, false);\n  $split-nest       : if(is-split($span) and $nest, true, false);\n  $edge             : get-edge($span);\n  $location         : get-location($span);\n\n  $float            : from;\n  $padding-before   : null;\n  $padding-after    : null;\n  $margin-before    : null;\n  $margin-after     : null;\n\n  // calculate widths\n  $spread: index(map-values($span), spread);\n  $span: if($split-nest and not($spread), map-merge($span, (spread: wide)), $span);\n  $width: get-span-width($span);\n  $gutters: get-gutters($span);\n\n  // apply gutters\n  @if is-inside($span) {\n    @if not(susy-get(role, $span)) {\n      $padding-before: map-get($gutters, before);\n      $padding-after: map-get($gutters, after);\n    }\n  } @else {\n    @if not($split-nest) {\n      $margin-before: map-get($gutters, before);\n      $margin-after: map-get($gutters, after);\n    }\n  }\n\n  // special margin handling\n  @if susy-get(output, $span) == isolate and $location {\n    $margin-before: get-isolation($span);\n    $margin-after: -100%;\n  } @else if $edge {\n    $is-split: is-split($span);\n    $pos: susy-get(gutter-position, $span);\n\n    @if $edge == last {\n      $float: susy-get(last-flow, $span);\n    }\n\n    @if not($is-split) {\n      @if $edge == full or ($edge == first and $pos == before) {\n        $margin-before: 0;\n      }\n      @if $edge == full or ($edge == last and $pos == after) {\n        $margin-after: 0;\n      }\n    }\n\n  }\n\n  @return (\n    width           : $width,\n    float           : $float,\n    margin-before   : $margin-before,\n    margin-after    : $margin-after,\n    padding-before  : $padding-before,\n    padding-after   : $padding-after,\n    flow            : susy-get(flow, $span),\n  );\n}\n\n// Get Span Width\n// --------------\n// Return span width.\n// - $span: <map>\n@function get-span-width(\n  $span\n) {\n  $span     : parse-span($span);\n\n  $n        : susy-get(span, $span);\n  $location : get-location($span);\n  $columns  : susy-get(columns, $span);\n  $gutters  : susy-get(gutters, $span);\n  $spread   : susy-get(spread, $span);\n\n  $context  : null;\n  $span-sum : null;\n  $width    : null;\n\n  @if $n == 'full' {\n    $pos: susy-get(gutter-position, $span);\n    $role: susy-get(role, $span);\n    $n: if($pos == split and $role != nest, susy-count($columns), 100%);\n  }\n\n  @if type-of($n) != number {\n    @warn \"(#{type-of($n)}) #{$n} is not a valid span.\";\n  } @else if unitless($n) {\n    $context: susy-sum($columns, $gutters, if(is-split($span), wide, narrow));\n    $spread: if(is-inside($span), $spread or wide, $spread);\n    $span-sum: susy($n, $location, $columns, $gutters, $spread);\n\n    $_math: susy-get(math, $span);\n    $_column-width: susy-get(column-width, $span);\n    @if $_math == static {\n      $width: $span-sum * valid-column-math($_math, $_column-width);\n    } @else {\n      $width: percentage($span-sum / $context);\n    }\n  } @else {\n    $width: $n;\n  }\n\n  @return $width;\n}\n","// Direction Helpers\n// =================\n\n// Susy Flow Defaults\n// ------------------\n// - PRIVATE\n@include susy-defaults((\n  flow: ltr,\n));\n\n// Get Direction\n// -------------\n// Return the 'from' or 'to' direction of a ltr or rtl flow.\n// - [$flow]  : ltr | rtl\n// - [$key]   : from | to\n@function get-direction(\n  $flow: map-get($susy-defaults, flow),\n  $key: from\n) {\n  $return: if($flow == rtl, (from: right, to: left), (from: left, to: right));\n  @return map-get($return, $key);\n}\n\n// To\n// --\n// Return the 'to' direction of a flow\n// - [$flow]  : ltr | rtl\n@function to(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, to);\n}\n\n// From\n// ----\n// Return the 'from' direction of a flow\n// - [$flow]  : ltr | rtl\n@function from(\n  $flow: map-get($susy-defaults, flow)\n) {\n  @return get-direction($flow, from);\n}\n","// Gutter Syntax\n// =============\n\n\n// Gutters\n// -------\n// Set gutters on an element.\n// - [$span]   : <settings>\n@mixin gutters(\n  $span: $susy\n) {\n  $inspect  : $span;\n  $span     : parse-gutters($span);\n  $_gutters : get-gutters($span);\n\n  $_output: (\n    before: map-get($_gutters, before),\n    after: map-get($_gutters, after),\n    flow: susy-get(flow, $span),\n  );\n\n  @include susy-inspect(gutters, $inspect);\n\n  @if is-inside($span) {\n    @include padding-output($_output...);\n  } @else {\n    @include margin-output($_output...);\n  }\n}\n\n@mixin gutter(\n  $span: $susy\n) {\n  @include gutters($span);\n}\n\n\n// Gutter\n// ------\n// Return the width of a gutter.\n// - [$span]   : <settings>\n@function gutter(\n  $span: $susy\n) {\n  $span: parse-gutters($span);\n\n  $_gutters: get-gutters($span);\n  $_gutters: map-get($_gutters, before) or map-get($_gutters, after);\n\n  @return $_gutters;\n}\n\n@function gutters(\n  $span: $susy\n) {\n  @return gutter($span);\n}\n\n\n// Get Gutter Width\n// ----------------\n// Return gutter width.\n// - [$context]: <context>\n@function get-gutter-width(\n  $context: $susy\n) {\n  $context  : parse-gutters($context);\n\n  $_gutters : susy-get(gutters, $context);\n  $_gutter  : susy-get(gutter-override, $context);\n\n  @if $_gutters and ($_gutters > 0) and not($_gutter) {\n    $_column-width: susy-get(column-width, $context);\n    $_math: gutter-math($context);\n    @if $_math == static {\n      $_gutter: $_gutters * valid-column-math($_math, $_column-width);\n    } @else {\n      $_columns : susy-get(columns, $context);\n      $_spread  : if(is-split($context), wide, susy-get(spread, $context));\n      $_gutter  : percentage($_gutters / susy-sum($_columns, $_gutters, $_spread));\n    }\n  }\n\n  $_gutter: if($_gutter == 'no-gutters' or $_gutter == 'no-gutter', null, $_gutter);\n\n  @return $_gutter;\n}\n\n\n// Get Gutters\n// -----------\n// Return before and after gutter values.\n// - [$context]: <context>\n@function get-gutters(\n  $context: $susy\n) {\n  $context            : parse-gutters($context);\n\n  $_gutter-position   : susy-get(gutter-position, $context);\n  $_gutter            : get-gutter-width($context);\n\n  $_return            : (before: null, after: null);\n\n  @if is-split($context) and $_gutter {\n    $_gutter: $_gutter / 2;\n    $_return: map-merge($_return, (before: $_gutter, after: $_gutter));\n  } @else {\n    $_return: map-merge($_return, ($_gutter-position: $_gutter));\n  }\n\n  @return $_return;\n}\n\n\n// Is Inside\n// ---------\n// Returns true if gutters are inside.\n// $context: <context>\n@function is-inside(\n  $context\n) {\n  $_inside: inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_inside, $_gutter-position), true, false);\n}\n\n\n// Is Split\n// --------\n// Returns true if gutters are split.\n// $context: <context>\n@function is-split(\n  $context\n) {\n  $_split: split inside inside-static;\n  $_gutter-position: susy-get(gutter-position, $context);\n\n  @return if(index($_split, $_gutter-position), true, false);\n}\n\n\n// Gutter Math\n// -----------\n// Return the math to use for gutter calculations\n// $context: <context>\n@function gutter-math(\n  $context: $susy\n) {\n  $_return  : susy-get(math, $context);\n  $_return  : if(susy-get(gutter-position, $context) == inside-static, static, $_return);\n\n  @return $_return;\n}\n"],"sourceRoot":"/source/"}